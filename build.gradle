
plugins {
	id "com.github.johnrengelman.shadow" version "8.1.1"
	id "io.micronaut.application" version "4.1.2"
	id 'com.avast.gradle.docker-compose' version '0.17.5'
	id "com.diffplug.spotless" version "6.22.0"
	id("io.micronaut.openapi") version "4.1.2"
	id 'org.graalvm.buildtools.native' version '0.9.28'
}

version = "0.7"
group = "mmo_server"


spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/master'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.17.0').aosp().reflowLongStrings()
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		// licenseHeader '/* (C)$YEAR */'
	}
}

tasks.compileJava.mustRunAfter(spotlessCheck)
dockerCompose.isRequiredBy(compileJava)

repositories {
	mavenCentral()
	gradlePluginPortal()
}

micronaut {
	runtime("netty")
	testRuntime("junit5")
	processing {
		incremental(true)
		annotations("mmo_server.*")
	}
}

dependencies {
	implementation("io.micronaut:micronaut-http-client")
	implementation("io.micronaut:micronaut-runtime")
	implementation("io.micronaut:micronaut-validation")
	runtimeOnly("ch.qos.logback:logback-classic")
	annotationProcessor('io.micronaut.data:micronaut-data-processor:4.1.4')
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	// micronaut v4 dependency:
	runtimeOnly("org.yaml:snakeyaml")

//	// swagger
	implementation("io.swagger.core.v3:swagger-annotations")

	// Flowable
	implementation("io.micronaut.rxjava3:micronaut-rxjava3:3.1.0")
	implementation("io.micronaut.rxjava3:micronaut-rxjava3-http-client:3.1.0")

	// Lombok:
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	// Micronaut inject
	annotationProcessor(platform('io.micronaut:micronaut-bom:3.10.2'))
	annotationProcessor("io.micronaut:micronaut-inject-java")
	implementation(platform('io.micronaut:micronaut-bom:3.10.2'))
	implementation("io.micronaut:micronaut-inject")

	// transactional annotation
	implementation('io.micronaut.spring:micronaut-spring:4.5.1')

	// MongoDB
//	implementation("io.micronaut.data:micronaut-data-mongodb")
	implementation "io.micronaut.mongodb:micronaut-mongo-reactive:4.6.0"

	// Kafka
	implementation("io.micronaut.kafka:micronaut-kafka")

	// Serializer
	runtimeOnly 'io.micronaut:micronaut-jackson-databind:3.8.7'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'

	// Map difference
	implementation 'com.google.guava:guava:31.1-jre'

	// redis
	implementation "io.micronaut.redis:micronaut-redis-lettuce"

	// test
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
	testImplementation 'org.assertj:assertj-core:3.24.2'
	testImplementation "io.micronaut.test:micronaut-test-junit5"
	testImplementation 'org.mockito:mockito-core:5.2.0'
	testImplementation 'io.projectreactor:reactor-core:3.5.4'
	testImplementation 'org.awaitility:awaitility:4.2.0'
}

application {
	mainClass.set("server.Application")
}

java {
	sourceCompatibility = JavaVersion.toVersion("17")
	targetCompatibility = JavaVersion.toVersion("17")
}

dockerCompose {
	useComposeFiles = ['./docker-compose.yml']
	stopContainers = false
	// do not wait for debug port
	tcpPortsToIgnoreWhenWaiting = [5005]
}
